
/*
 * Daniel DelyMcShane
 * CS486
 * HW1: Coin-Collecting Problem
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Random;

public class CoinCollector {

	public static int counter = 0;

	public static void main(String[] args) throws FileNotFoundException {

		double[][] map = new double[6][7];
		/*
		// read map from file for testing
		
		Scanner s = new Scanner(new File("map.txt"));
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[i].length; j++) {
				map[i][j] = s.nextInt();
			}
		}


		// get result of efficient algorithm for max coins
		double result = maxCoins(map);
		System.out.println("Efficient algorithm: " + result);
		s.close();
		*/

		//create a random map
		map = generateRandomMap(6, 7);
		
		System.out.println("RANDOMLY GENERATED MAP: ")
		//get results of efficient algorithms
		maxCoins(map);
		maxValue(map);

		System.out.println("GREEDY COIN VALUE:  " + greedyMaxValue(map, map.length - 1, map[0].length - 1));
		System.out.println("GREEDY COIN COUNTER:  " + greedyMaxCoin(map, map.length - 1, map[0].length - 1));

		// printMap(genMap);
	}

	// utility method to print out map
	public static void printMap(double[][] map) {
		// print out map
		for (int i = 0; i < map.length; i++) {
			System.out.print("\t\tRow " + i + ": ");
			for (int j = 0; j < map[i].length; j++) {
				System.out.print(map[i][j] + "|");
			}
			System.out.println();
			// System.out.println("\t\t ----------------------------");
		}
	}

	// efficient algorithm to determine the max number of coins that can be
	// picked up
	public static double maxCoins(double[][] coins) {

		int n = coins.length;
		int m = coins[0].length;
		// initialize result matrix to 0
		double[][] result = new double[n][m];

		// if first is a coin add 1, otherwise leave as 0
		if (coins[1][1] > 0) {
			result[1][1] = 1;
		}

		// set first row
		for (int j = 2; j < m; j++) {

			if (coins[1][j] > 0) {
				result[1][j] = result[1][j - 1] + 1;
			} else {
				result[1][j] = result[1][j - 1];
			}
		}

		for (int i = 2; i < n; i++) {

			// set column i
			if (coins[i][1] > 0) {
				result[i][1] = result[i - 1][1] + 1;
			} else {
				result[i][1] = result[i - 1][1];
			}

			for (int j = 2; j < m; j++) {

				// get value to above and to left
				double up = coins[i - 1][j];
				double left = coins[i][j - 1];
				boolean addFlag = false;

				// if coin in current slot set add flag
				if (coins[i][j] > 0) {
					addFlag = true;
				}

				// if slot above has more coins so far use that
				if (up > left) {
					if (addFlag) {
						result[i][j] = result[i - 1][j] + 1;
					} else {
						result[i][j] = result[i - 1][j];
					}
				}
				// otherwise either the left has a greater value. or netieh has
				// a value
				else {
					// addFlag was set from left add 1
					if (addFlag) {
						result[i][j] = result[i][j - 1] + 1;
					} else {
						// if the slot to the left is greater than the one above
						// use that
						if (result[i][j - 1] > result[i - 1][j]) {
							result[i][j] = result[i][j - 1];
							// otherwise they're both 1 or 0 so use the slot to
							// the left
						} else {
							result[i][j] = result[i - 1][j];
						}

					}

				}

				// result[i][j] = Math.max(result[i - 1][j] + coins[i][j],
				// result[i][j - 1] + coins[i][j]);

			}
		}

	 System.out.println("Result Map of Max Coins: ");
		  printMap(result);
return result[n - 1][m - 1];
	}

	// efficient algorithm to determine the maximum value of coins that can be
	// picked up
	public static double maxValue(double[][] coins) {

		int n = coins.length;
		int m = coins[0].length;
		// initialize result matrix to 0
		double[][] result = new double[n][m];
		result[1][1] = coins[1][1];

		for (int j = 2; j < m; j++) {
			result[1][j] = result[1][j - 1] + coins[1][j];
		}

		for (int i = 2; i < n; i++) {
			result[i][1] = result[i - 1][1] + coins[i][1];

			for (int j = 2; j < m; j++) {
				result[i][j] = Math.max(result[i - 1][j] + coins[i][j], result[i][j - 1] + coins[i][j]);

			}
		}

	
	 System.out.println("Result Map of Max Value: ");
		  printMap(result);
		 

		return result[n - 1][m - 1];
	}

	public static double[][] generateRandomMap(int rows, int columns) {
		double[][] map = new double[rows][columns];

		// values to be used in map, add extra zeroes to prevent flooding map
		// with coins and easy to debug
		double[] values = { 0, 0, 0, 0, .5, 1, 2, 5 };

		Random rand = new Random();

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < columns; j++) {
				map[i][j] = values[rand.nextInt(8)];
			}
		}

		return map;
	}

	/*
	 * public static double greedyMaxCoin(double[][] coins, int row, int
	 * column){
	 * 
	 * if(row == 0 || column == 0) { return 0; } else { if(coins[row][column] >
	 * 0) {
	 * 
	 * return 1 + Math.max(greedyMaxCoin(coins, row-1, column),
	 * greedyMaxCoin(coins, row, column- 1)); } else { counter++;
	 * System.out.println("COUNTER:  " + counter); return greedyMaxCoin(coins,
	 * row-1, column) + greedyMaxCoin(coins, row, column - 1); } }
	 * 
	 * }
	 */

	public static double greedyMaxCoin(double[][] coins, int row, int column) {

		// base case: return 0
		if (row == 0 || column == 0) {
			return 0;
		} else {
			// if the current slot has a coin in it add 1 and call the max
			// functionon both possible directions
			
			if (coins[row][column] > 0) {
				//System.out.println("COUNTER PING");
				// System.out.println("row: " + row + "column: " + column);
				return 1 + Math.max(greedyMaxCoin(coins, row - 1, column), greedyMaxCoin(coins, row, column - 1));

			}
			// otherwise just return the max of both previous paths
			else {
				return Math.max(greedyMaxCoin(coins, row - 1, column), greedyMaxCoin(coins, row, column - 1));

			}
			// System.out.println(Math.max(greedyMaxCoin(coins, row-1, column),
			// greedyMaxCoin(coins, row, column- 1)));
		}
	}

	public static double greedyMaxValue(double[][] coins, int row, int column) {

		// base case: return 0
				if (row == 0 || column == 0) {
					return 0;
				} else {
					// if the current slot has a coin in it add 1 and call the max
					// functionon both possible directions
					if (coins[row][column] > 0) {
						//System.out.println("VALUE PING");
						// System.out.println("row: " + row + "column: " + column);
						return coins[row][column] + Math.max(greedyMaxValue(coins, row - 1, column), greedyMaxValue(coins, row, column - 1));

					}
					// otherwise just return the max of both previous paths
					else {
						return Math.max(greedyMaxValue(coins, row - 1, column), greedyMaxValue(coins, row, column - 1));

					}
		}
	}

}